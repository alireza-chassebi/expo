{"version":3,"file":"Localization.js","sourceRoot":"","sources":["../src/Localization.ts"],"names":[],"mappings":"AAAA,OAAO,gBAAgB,MAAM,oBAAoB,CAAC;AAKlD,2FAA2F;AAC3F,yHAAyH;AACzH,MAAM,WAAW,GAAG,CAAC,MAAc,EAAU,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;AAEzE;;;;GAIG;AACH,MAAM,CAAC,MAAM,QAAQ,GAAG,gBAAgB,CAAC,QAAQ,CAAC;AAElD;;;;GAIG;AACH,MAAM,CAAC,MAAM,gBAAgB,GAAG,gBAAgB,CAAC,gBAAgB,CAAC;AAElE;;;;GAIG;AACH,MAAM,CAAC,MAAM,iBAAiB,GAAG,gBAAgB,CAAC,iBAAiB,CAAC;AAEpE;;GAEG;AACH,MAAM,CAAC,MAAM,gBAAgB,GAAG,gBAAgB,CAAC,gBAAgB,CAAC;AAElE;;;GAGG;AACH,MAAM,CAAC,MAAM,QAAQ,GAAG,gBAAgB,CAAC,QAAQ,CAAC;AAElD;;;;;GAKG;AACH,MAAM,CAAC,MAAM,KAAK,GAAG,gBAAgB,CAAC,KAAK,CAAC;AAE5C;;;;;GAKG;AACH,MAAM,CAAC,MAAM,MAAM,GAAG,WAAW,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;AAE3D;;;GAGG;AACH,MAAM,CAAC,MAAM,OAAO,GAAG,gBAAgB,CAAC,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;AAEjE;;;;;GAKG;AACH,MAAM,CAAC,MAAM,QAAQ,GAAG,gBAAgB,CAAC,QAAQ,CAAC;AAElD;;;;;GAKG;AACH,MAAM,CAAC,MAAM,MAAM,GAAG,gBAAgB,CAAC,MAAM,CAAC;AAE9C;;;;GAIG;AACH,MAAM,CAAC,KAAK,UAAU,oBAAoB;IACxC,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG,YAAY,EAAE,GAAG,MAAM,gBAAgB,CAAC,oBAAoB,EAAE,CAAC;IAC3F,OAAO;QACL,MAAM,EAAE,WAAW,CAAC,MAAM,CAAC;QAC3B,OAAO,EAAE,gBAAgB,CAAC,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC;QAClD,GAAG,YAAY;KAChB,CAAC;AACJ,CAAC","sourcesContent":["import ExpoLocalization from './ExpoLocalization';\nimport { Localization } from './Localization.types';\n\nexport { Localization };\n\n// Web, Android, and some iOS values use `-`. This will convert the iOS values that use `_`\n// https://github.com/expo/expo/blob/21ae94bae2e8369992050c433a00699d425b35bd/packages/expo/src/Localization.ts#L112-L114\nconst parseLocale = (locale: string): string => locale.replace('_', '-');\n\n/**\n * Three-character ISO 4217 currency code. Returns `null` on web.\n *\n * @example `USD`, `EUR`, `CNY`, null\n */\nexport const currency = ExpoLocalization.currency;\n\n/**\n * Decimal separator used for formatting numbers.\n *\n * @example `,`, '.'\n */\nexport const decimalSeparator = ExpoLocalization.decimalSeparator;\n\n/**\n * Grouping separator used when formatting numbers larger than 1000.\n *\n * @example `.`, '', ','\n */\nexport const groupingSeparator = ExpoLocalization.groupingSeparator;\n\n/**\n * A list of all the supported language ISO codes.\n */\nexport const isoCurrencyCodes = ExpoLocalization.isoCurrencyCodes;\n\n/**\n * Boolean value that indicates whether the system uses the metric system.\n * On Android and web, this is inferred from the current region.\n */\nexport const isMetric = ExpoLocalization.isMetric;\n\n/**\n * Returns if the system's language is written from Right-to-Left.\n * This can be used to build features like [bidirectional icons](https://material.io/design/usability/bidirectionality.html).\n *\n * Returns `false` in Server Side Rendering (SSR) environments.\n */\nexport const isRTL = ExpoLocalization.isRTL;\n\n/**\n * An [IETF BCP 47 language tag](https://en.wikipedia.org/wiki/IETF_language_tag),\n * consisting of a two-character language code and optional script, region and variant codes.\n *\n * @example `en`, `en-US`, `zh-Hans`, `zh-Hans-CN`, `en-emodeng`\n */\nexport const locale = parseLocale(ExpoLocalization.locale);\n\n/**\n * List of all the native languages provided by the user settings.\n * These are returned in the order the user defines in their device settings.\n */\nexport const locales = ExpoLocalization.locales.map(parseLocale);\n\n/**\n * The current time zone in display format.\n * On Web time zone is calculated with Intl.DateTimeFormat().resolvedOptions().timeZone. For a better estimation you could use the moment-timezone package but it will add significant bloat to your website's bundle size.\n *\n * @example `America/Los_Angeles`\n */\nexport const timezone = ExpoLocalization.timezone;\n\n/**\n * The region code for your device that comes from the Region setting under Language & Region on iOS.\n * This value is always available on iOS, but might return `null` on Android or web.\n *\n * @example `US`, `NZ`, null\n */\nexport const region = ExpoLocalization.region;\n\n/**\n * Get the latest native values from the device.\n * Locale can be changed on some Android devices without resetting the app.\n * On iOS, changing the locale will cause the device to reset meaning the constants will always be correct.\n */\nexport async function getLocalizationAsync(): Promise<Localization> {\n  const { locale, locales, ...localization } = await ExpoLocalization.getLocalizationAsync();\n  return {\n    locale: parseLocale(locale),\n    locales: ExpoLocalization.locales.map(parseLocale),\n    ...localization,\n  };\n}\n"]}